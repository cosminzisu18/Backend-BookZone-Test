	Principiul Single Responsibility: OrderService este responsabil doar pentru logica de adăugare a comenzilor,
nu pentru accesul direct la date. Aceasta îmbunătățește organizarea codului și facilitează testarea unităților,
deoarece schimbările în logica de afaceri nu afectează logica de acces la date.



Beneficii:
	Separarea Preocupărilor: Codul este mai ușor de întreținut și testat.
	Flexibilitate: Permite schimbarea sau extinderea funcționalităților fără a afecta alte părți ale aplicației.

Aplicare:

// OrderService.cs
public class OrderService : IOrderService
{
    private readonly AppDbContext _context;

    public OrderService(AppDbContext context)
    {
        _context = context;
    }

    public async Task AddOrderAsync(Order order)
    {
        var userExists = await _context.Users.AnyAsync(u => u.Id == order.UserId);
        if (!userExists)
        {
            throw new ArgumentException("User not found");
        }

        _context.Orders.Add(order);
        await _context.SaveChangesAsync();
    }
}
	